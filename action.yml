apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: nexusiq
inputs:
  server-url:
    required: true
  username:
    required: true
  password:
    required: true
  org-id:
    required: true
  image-location:
    required: true
  image-tag:
    required: true
runs:
  using: composite
  steps:
    - name: skopeo
      uses: docker://public.ecr.aws/logistics/quay.io/skopeo/stable:v1.10
      shell: bash
      env:
        BINARY_IMAGE_NAME: "nexusiq_binary_asset.tar"
      run: | 
          set -x
          skopeo -v
          cd /
          if [ -f $CLOUDBEES_WORKSPACE/$BINARY_IMAGE_NAME ]; then
               rm $CLOUDBEES_WORKSPACE/$BINARY_IMAGE_NAME
          fi
          skopeo copy --insecure-policy docker://${{ inputs.image-location }}:${{ inputs.image-tag }} docker-archive:$CLOUDBEES_WORKSPACE/$BINARY_IMAGE_NAME:${{ inputs.image-location }}:${{ inputs.image-tag }} --dest-oci-accept-uncompressed-layers
          ls -ltr $CLOUDBEES_WORKSPACE
    - id: nexusiq-binary
      name: nexusiq
      # uses: docker://public.ecr.aws/l7o7z1g8/actions/nexusiq-actions:main-8ff236325bad464e435af300ca1e750f9a02255b
      uses: docker://public.ecr.aws/l7o7z1g8/actions/nexusiq-actions:main-240d030d13f4b9ca3dab1bca3d4801fdba11a7ba
      shell: bash
      env:
        RUN_ID: ${{ cloudbees.run_id }}
        JOB_ID: ${{ job.id }}
        STEP_ID: ${{ step.internal.id }}
        DNS_URL: ${{ cloudbees.api.url }}
        JWT_TOKEN: ${{ cloudbees.api.token }} 
        BINARY_IMAGE_NAME: "nexusiq_binary_asset.tar"
        CONFIG_JSON: '{\"metaInfo\":{\"url\":\"${{ inputs.server-url }}\",\"username\":\"${{ inputs.username }}\",\"password\":\"${{ inputs.password }}\",\"client_secret\":\"${{ inputs.org-id }}\",\"toolName\":\"nexusiq\"},\"orchestratorInfo\":{\"assetType\":\"BINARY\",\"assetIdentifier\":\"${{ inputs.image-location }}\",\"profileIdentifier\":\"${{ inputs.image-tag }}\",\"sourceType\":\"SAAS\"},\"metaInformation\":{\"actor\":\"NA\",\"commit_id\":\"NA\",\"tenent_info\":\"NA\",\"scanner_type\":\"Container\"}}'
      run: |
        set -x
        echo "RUN ID: ${{ cloudbees.run_id }}"
        echo "Job ID: ${{ job.id }}"
        echo "Step ID: ${{ step.internal.id }}"
        cd /
        cd /app/
        /bin/bash -c "java -jar /app/nexus-iq-server.jar & while ! nc -z localhost 5001; do sleep 1; done && /app/orchestrator -scanConfig \"${CONFIG_JSON}\" execute-analyser && exit"

       
        
